// =============================================================================
// Screen
// =============================================================================


// Wrap the content in a media query determined by the values of `$min-width`
// and `$max-width` arguments:
// - If only one argument is provided, the appropriate min-width or
// max-width media query is used.
// - If both arguments are provided, a media query ranging between the two
// breakpoints is used.
// - If both arguments are null, the content is returned without a media query.
//
// To prevent overlapping media queries, 1 pixel is subtracted from
// `$max-width`.
//
// @param {number | string | null} $min-width - Accepts a key registered
//     in the `$breakpoints` map or a value in ems or pixels.
// @param {number | string | null} $max-width [null] - Accepts a key
//     registered in the `$breakpoints` map or a value in ems or pixels.

@mixin screen($min-width, $max-width: null) {
    @if type-of($min-width) == "string" and str-slice($min-width, 1, 1) == "<" {
        $max-width: str-slice($min-width, 2);
        $min-width: null;
    }

    $min-width: parse-bp-value($min-width);
    $max-width: parse-bp-value($max-width);

    @if $min-width == 0 and $max-width == 0 {
        @content
    } @else if $min-width > 0 and $max-width == 0 {
        @media (min-width: em($min-width)) {
            @content
        }
    } @else if $min-width == 0 and $max-width > 0 {
        @media (max-width: em($max-width - 1)) {
            @content
        }
    } @else {
        @media (min-width: em($min-width)) and (max-width: em($max-width - 1)) {
            @content
        }
    }
}


// Wrap the content in a max-width media query.
// To prevent overlapping media queries, 1 pixel is subtracted from
// `$max-width`.
//
// @param {number | string} $max-width - Accepts a key registered in the
//     `$breakpoints` map or a value in ems or pixels.

@mixin screen-below($max-width) {
    @include screen(null, $max-width) {
        @content
    }
}


// Wrap the content in a media query ranging between the given breakpoints.
// To prevent overlapping media queries, 1 pixel is subtracted from
// `$max-width`.
//
// @param {number | string} $min-width - Accepts a key registered in the
//     `$breakpoints` map or a value in ems or pixels.
// @param {number | string} $max-width - Accepts a key registered in the
//     `$breakpoints` map or a value in ems or pixels.

@mixin screen-between($min-width, $max-width) {
    @include screen($min-width, $max-width) {
        @content
    }
}
